# montecarlo.py
# By Brad Nguyen
# This program uses the Monte Carlo Technique to estimate the value of pi.
# Using that estimation, it is compared with the actual value of pi, then
# Calculates the difference between the two and gives an error approximation.

# Check to see if this program is running in Python3.
import sys
if sys.version_info[0] < 3:
	print("\nThis program must be ran in Python 3.\n")
	exit()

# Uses random() which returns a value between 0 and 1 (including 0, excluding 1).
from random import random
# Compare with the actual value of pi.
from math import pi

def main():
	printIntro()
	num = numberOfDarts()
	hits = simDarts(num)
	estPi(num, hits)

def printIntro():
	print("\nThis program features a Monte Carlo technique that estimates the")
	print("value of pi by simulating a scenario involving a dart board inside")
	print("a square cabinet. If the darts are thrown randomly, the proportion")
	print("that hit the dart board vs. those that hit the cabinet")
	print("(not the dart board) will determine the relative area of the dart")
	print("board that estimates pi.\n")
	
def numberOfDarts():
	d = eval(input("Enter the number of darts to be thrown: "))
	return d
	
def	simDarts(darts):
	h = 0
# Get the values inside the 2x2 square we are simulating.
	for i in range(darts):
		x = 2*random()-1
		y = 2*random()-1
	
# If the values are inside the circle.
		if x**2+y**2 <= 1:
			h += 1
	return h
	
def estPi(n, h):
	mc = 4 * (float(h)/n)
	# Error approximation.
	error = (mc-pi)/pi*100
	print("\nWith a total of {0} darts thrown, {1} of them hit the dart board.".format(n, h))
	print("The value for this pi is {0}.".format(mc))
	print("The actual value of pi is {0}.".format(pi))
	print("The difference between {0} and {1} is".format(mc, pi), mc-pi)
	print("The error between the two ([approximate-exact]/exact) is {0}%.\n".format(error))
	return mc
	
if '__name__' == '__main__':
	main()
